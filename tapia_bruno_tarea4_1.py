# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SVTbGtpyD7wASOXB_DCfI5hy24z3sni2
"""

import numpy as np
import matplotlib.pyplot as plt

# Datos originales
mu_x = np.array([1, 2])
Sigma_x = np.array([[2, 1],
                    [1, 2]])

A = np.array([[1, 2],
              [3, 4]])
b = np.array([1, 1])

# Media y covarianza transformadas
mu_y = A @ mu_x + b
Sigma_y = A @ Sigma_x @ A.T

print("Media de Y:\n", mu_y)
print("Covarianza de Y:\n", Sigma_y)

"""
El vector b no cambia la nube de puntos ni los contornos de equiprobabilidad,
solo traslada su centro, mientras que el vector A rota y dilata los contornos.

"""
# FunciÃ³n para la densidad gaussiana bivariante
def multivariate_gaussian(pos, mu, Sigma):
    n = mu.shape[0]
    det = np.linalg.det(Sigma)
    inv = np.linalg.inv(Sigma)
    N = np.sqrt((2*np.pi)**n * det)
    diff = pos - mu
    fac = np.einsum('...k,kl,...l->...', diff, inv, diff)
    return np.exp(-fac/2) / N

# Grid para dibujar
x, y = np.mgrid[-5:10:.1, -5:20:.1]
pos = np.dstack((x, y))

# Evaluar densidades
pdf_x = multivariate_gaussian(pos, mu_x, Sigma_x)
pdf_y = multivariate_gaussian(pos, mu_y, Sigma_y)

# Contornos
plt.contour(x, y, pdf_x, colors='blue', alpha=0.5)
plt.contour(x, y, pdf_y, colors='red', alpha=0.5)

# Marcar medias
plt.scatter(*mu_x, color='blue', label='Media X')
plt.scatter(*mu_y, color='red', label='Media Y')
plt.title("Contornos de equiprobabilidad: original (azul) y transformada (rojo)")
plt.xlabel('x1')
plt.ylabel('x2')
plt.legend()
plt.axis('equal')
plt.show()